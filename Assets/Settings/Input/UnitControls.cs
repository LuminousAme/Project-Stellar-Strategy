//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/Input/UnitControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UnitControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UnitControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UnitControls"",
    ""maps"": [
        {
            ""name"": ""Unit"",
            ""id"": ""e2ef9c1c-96ee-445b-ab8a-a82cf10029bc"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""20aa36f2-1875-43db-9506-0618d20cd050"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Travel"",
                    ""type"": ""Button"",
                    ""id"": ""b372c5cf-21fe-41ef-a3ac-6afac21dd247"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""33e54be1-da03-4e1d-a508-c0b74d45ede0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""794a1932-264d-4601-987a-cbc306036a17"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Travel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Unit
        m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
        m_Unit_Select = m_Unit.FindAction("Select", throwIfNotFound: true);
        m_Unit_Travel = m_Unit.FindAction("Travel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Unit
    private readonly InputActionMap m_Unit;
    private IUnitActions m_UnitActionsCallbackInterface;
    private readonly InputAction m_Unit_Select;
    private readonly InputAction m_Unit_Travel;
    public struct UnitActions
    {
        private @UnitControls m_Wrapper;
        public UnitActions(@UnitControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Unit_Select;
        public InputAction @Travel => m_Wrapper.m_Unit_Travel;
        public InputActionMap Get() { return m_Wrapper.m_Unit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
        public void SetCallbacks(IUnitActions instance)
        {
            if (m_Wrapper.m_UnitActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnSelect;
                @Travel.started -= m_Wrapper.m_UnitActionsCallbackInterface.OnTravel;
                @Travel.performed -= m_Wrapper.m_UnitActionsCallbackInterface.OnTravel;
                @Travel.canceled -= m_Wrapper.m_UnitActionsCallbackInterface.OnTravel;
            }
            m_Wrapper.m_UnitActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Travel.started += instance.OnTravel;
                @Travel.performed += instance.OnTravel;
                @Travel.canceled += instance.OnTravel;
            }
        }
    }
    public UnitActions @Unit => new UnitActions(this);
    public interface IUnitActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnTravel(InputAction.CallbackContext context);
    }
}
